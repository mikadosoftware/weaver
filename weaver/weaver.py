docopt_str = """Weaver

Usage:
  weaver apidocs <rootpath>
  weaver touchpad
  weaver (-h | --help)
  weaver --version

Options:
  -h --help     Show this screen.
  --version     Show version.

"""
from docopt import docopt

'''
weaver
------

I want to have a single dev-helper tool plus a stringent dev process.
So I want weaver.  It will act a little bit like phab in phabricatgor - a local
command line tool that will enforce local operations.

Things I want as a develeoper

* Linting tool
* testing tool - py.test that can use doctests as well as others
* todoinator
* linking todos to longer term store
* code-forensics?
* build tool
* laptop build tool
* test coverage
* how to do micking??

'''
from fabric.api import local, env, run, sudo
from fabric.tasks import execute
import fabric.contrib.files
import os


    
def apidocs(rootpath):
    """Walk `rootpath` and generate a simple .rst format for each .py """
    modules2use = []
    for root, dirs, files in os.walk(rootpath):
        if '.git' in dirs:
            dirs.remove('.git')
        for file in files:
            if file == '__init__.py': continue
            if '.py' == file[-3:]:
                modules2use.append(os.path.join(root, file))
    s = """
===
API
===

Autogenerated API

"""
    for file in modules2use:
        modpath = file.replace("/", ".").replace(".py", "")
        basename = os.path.basename(file).replace(".py", "")
        chunk = ""
        chunk += basename + "\n" + "=" * len(basename)
        chunk += "\n\n"
        chunk += ".. automodule:: {}\n   :members:\n\n".format(modpath)
        s += chunk
    print(s)
        
        

def main():
    args = docopt(docopt_str)
       

    if args['apidocs']:
        apidocs(args['<rootpath>'])

if __name__ == '__main__':
    main()
